From 343e638f924260fbdf786696ef4e171842c210ba Mon Sep 17 00:00:00 2001
From: Liu Xiaoxu <liuxiaoxu@openthos.org>
Date: Wed, 13 Mar 2019 08:49:44 +0000
Subject: [PATCH 074/110] oto8: frameworks: base: Now window can maximize.

And when a maximum window be moved it will be set to the size before docked.

Signed-off-by: Liu Xiaoxu <liuxiaoxu@openthos.org>
Reviewed-by: ladehunter <ladehunter@gmail.com>
Reviewed-by: Wang Zhixu <wangzhixu@openthos.org>
---
 services/core/java/com/android/server/wm/Task.java | 46 ++++++++++++++++++++++
 1 file changed, 46 insertions(+)

diff --git a/services/core/java/com/android/server/wm/Task.java b/services/core/java/com/android/server/wm/Task.java
index cbc4b6e..0d6c920 100644
--- a/services/core/java/com/android/server/wm/Task.java
+++ b/services/core/java/com/android/server/wm/Task.java
@@ -84,6 +84,15 @@ class Task extends WindowContainer<AppWindowToken> implements DimLayer.DimLayerU
     // For handling display rotations.
     private Rect mTmpRect2 = new Rect();
 
+    // Maximize bounds in Freeform workspace.
+    private Rect mMaxTmpRect = new Rect();
+
+    // Left docked bounds in Freeform workspace.
+    private Rect mLeftDockedTmpRect = new Rect();
+
+    // Right docked bounds in Freeform workspace.
+    private Rect mRightDockedTmpRect = new Rect();
+
     // Resize mode of the task. See {@link ActivityInfo#resizeMode}
     private int mResizeMode;
 
@@ -321,9 +330,46 @@ class Task extends WindowContainer<AppWindowToken> implements DimLayer.DimLayerU
             displayContent.mDimLayerController.updateDimLayer(this);
         }
         onOverrideConfigurationChanged(mFillsParent ? Configuration.EMPTY : overrideConfig);
+        setUniqueBounds();
+        if (mBounds.equals(mMaxTmpRect) || mBounds.equals(mLeftDockedTmpRect)
+                    || mBounds.equals(mRightDockedTmpRect)) {
+            mIsDocked = true;
+            validateDockedTmpRect();
+        }
         return boundsChange;
     }
 
+    private void validateDockedTmpRect() {
+        getDimBounds(mDockedTmpRect);
+        int startX, startY, width, height;
+        startX = mMaxTmpRect.width() / 4;
+        startY = mMaxTmpRect.height() / 4;
+        if (mDockedTmpRect.equals(mMaxTmpRect)) {
+            width = mMaxTmpRect.width() / 2;
+            height = width / 16 * 9;
+        } else if (mDockedTmpRect.equals(mLeftDockedTmpRect)
+                    || mDockedTmpRect.equals(mRightDockedTmpRect)) {
+            height = mMaxTmpRect.height() / 3 * 2;
+            width = height / 16 * 9;
+        }
+        mDockedTmpRect.set(new Rect(startX, startY, startX + width, startY + height));
+    }
+
+    private void setUniqueBounds() {
+        DisplayContent content = getDisplayContent();
+        if (content != null) {
+            if (mMaxTmpRect.isEmpty()) {
+                content.getLogicalDisplayRect(mMaxTmpRect);
+                int width = mMaxTmpRect.width();
+                int height = mMaxTmpRect.height();
+                mLeftDockedTmpRect = new Rect(mMaxTmpRect.left, mMaxTmpRect.top,
+                        mMaxTmpRect.right / 2, mMaxTmpRect.bottom);
+                mRightDockedTmpRect = new Rect(mMaxTmpRect.left + width / 2, mMaxTmpRect.top,
+                        mMaxTmpRect.right, mMaxTmpRect.bottom);
+            }
+        }
+    }
+
     /**
      * Sets the bounds used to calculate the insets. See
      * {@link android.app.IActivityManager#resizeDockedStack} why this is needed.
-- 
2.7.4

